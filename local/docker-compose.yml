version: '2'

networks:
  app-network:
    driver: bridge

services:
  app-client:
    container_name: ${PROJECT_NAME}-${FRONTEND_TECH}
    restart: always
    build:
      context:  ../
      dockerfile: ./local/docker/client/files/Dockerfile    
    networks: 
      - app-network
    ports:
      - "${REACT_HOST_HTTP_PORT}:3000"
    volumes:
      - '../app-frontend/:/var/srv/app'
      - '/var/srv/app/node_modules'
    environment: 
      - NODE_ENV=development

  php-backend:
    container_name: ${PROJECT_NAME}-phpfpm
    restart: always
    build:
      context: ../
      dockerfile: ./local/docker/api/Dockerfile
    networks: 
      - app-network    
    depends_on:
      - db
    # Change those values with the name of the project backend directory
    env_file:
      - ../app-backend/.env    
    volumes:
      - ../app-backend:/srv/api:rw

  api-nginx:
    container_name: ${PROJECT_NAME}-${BACKEND_TECH}
    restart: always
    build:
      context: ../
      dockerfile: ./local/docker/api/nginx/Dockerfile.nginx
    networks: 
      - app-network      
    depends_on:
      - php-backend
    volumes:
      - ../app-backend/public:/srv/api/public:ro
    ports:
      - "${SF4_HOST_HTTP_PORT}:80"

  db:
    # In production, you may want to use a managed database service
    container_name: ${PROJECT_NAME}-${RELATIONAL_BD_TECH}
    image: postgres:10.3-alpine
    restart: always
    environment:
      - POSTGRES_DB=${PROJECT_NAME}
      - POSTGRES_USER=${PROJECT_NAME}      
      - POSTGRES_PASSWORD=${PROJECT_NAME}
    networks: 
      - app-network
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "${PG_HOST_PORT}:5432"

  redis:
    image: redis:4.0.8-alpine
    container_name: ${PROJECT_NAME}-redis
    restart: always
    hostname: ${PROJECT_NAME}-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks: 
      - app-network      
    ports:
      - "${REDIS_PORT}:6379"
